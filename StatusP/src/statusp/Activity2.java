/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package statusp;

import java.util.ArrayList;
import javax.swing.JEditorPane;

/**
 *
 * @author Student
 */
public class Activity2 extends javax.swing.JFrame {

    /**
     * Creates new form Activity2
     */
    private javax.swing.JLabel jLabel1;
    //private javax.swing.JPanel jPanel1;
    public int name;
    public Activity2() {
        initComponents();
      jEditorPane1.setToolTipText("Enter Burst Time");
       jEditorPane2.setToolTipText("Enter Arrival Time");
      jEditorPane3.setToolTipText("Enter Priorities");
       jEditorPane4.setToolTipText("Enter  Time Quanta");
       jPanel7.setVisible(false);
        
    }
    public Activity2(int msg)
    {
       initComponents();
       this.name=msg;
     //  jLabel1.setText(name+"l");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane3 = new javax.swing.JEditorPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane4 = new javax.swing.JEditorPane();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jEditorPane1.setToolTipText("Enter Burst Time");
        jScrollPane1.setViewportView(jEditorPane1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setViewportView(jEditorPane2);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Enter burst time");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Enter Arrival Time");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(359, 359, 359)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("StatusP");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----Select Algorithm Type-----", "FCFS", "SJF", "RoundRobin", "Priority(Non-Preemptive)", "Priority(Preemptive)", "SRJF" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setText("Info");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(507, 507, 507)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(489, 489, 489)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(207, 207, 207))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Enter Priority");

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setViewportView(jEditorPane3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(389, 389, 389)
                .addComponent(jLabel5)
                .addGap(65, 65, 65)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane4.setViewportView(jEditorPane4);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Enter Time quantum");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(348, 348, 348)
                .addComponent(jLabel6)
                .addGap(64, 64, 64)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(548, 548, 548)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("jLabel7");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(450, 450, 450)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(456, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1190, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 109, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void check(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check
 name=jComboBox1.getSelectedIndex();
                switch (name) {
            case 1:
                try{
                fcfs(evt);
               // this.dispose();
                }
                catch(Exception e)
                {
                    System.out.println("Error is "+e);              //alibaba
                    jLabel7.setText("Please Check Your Input");
                    jPanel7.setVisible(true);
                }
                break;
            case 2:
                sjfnon(evt);
                //this.dispose();
                
                break;
            case 3:
                rrobin(evt);
               // this.dispose();
                
                break;
            case 6:
                srtf(evt);
               // this.dispose();
                
                break;
            case 4: 
                priornon(evt);
               // this.dispose();
                
                break;
                
            case 5:
                priorpre(evt);
               // this.dispose();
                
                break;
            default:
                
                break;
        }
// TODO add your handling code here:
    }//GEN-LAST:event_check

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    String sjs=(String)jComboBox1.getSelectedItem();
    int nons=jComboBox1.getSelectedIndex();
      
    if(nons==1||nons==2||nons==6)
    {
        jPanel2.setVisible(true);
       jPanel4.setVisible(false);
       jPanel5.setVisible(false);
    }
    if(nons==3)
    {
        jPanel2.setVisible(true); 
       jPanel4.setVisible(false);
       jPanel5.setVisible(true);
  
  
    }
    if(nons==4||nons==5)
    {
       jPanel2.setVisible(true); 
       jPanel4.setVisible(true);
       jPanel5.setVisible(false);
         
    }
    
               // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    int nons=jComboBox1.getSelectedIndex();
if(nons==1)
{
    new Activity5().setVisible(true);
}
else if(nons==2)
{
    new sjf().setVisible(true);
}
else if(nons==3)
{
    new roundrobin().setVisible(true);
}
else if(nons==4||nons==5)
{
    new priority().setVisible(true);
}
else if(nons==6)
{
    new srtf().setVisible(true);
}
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**/
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    public javax.swing.JEditorPane jEditorPane1;
    public javax.swing.JEditorPane jEditorPane2;
    public javax.swing.JEditorPane jEditorPane3;
    public javax.swing.JEditorPane jEditorPane4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Activity2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Activity2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Activity2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Activity2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
              System.out.println(name);
                new Activity2().setVisible(true);
          //    jLabel1.setText("TESTMODE");
              
            }
        });
    }
    public void fcfs(java.awt.event.ActionEvent evt)
    {
    
        //String avt = at.getText().toString();
        ArrayList<String> pdets=new ArrayList<>();
        float[] results=new float[4];
           String avt;avt = jEditorPane2.getText();
        String bst=jEditorPane1.getText();
        String[] brt = bst.split(",");
        //int btindx=0,atindx=0;
        System.out.println(bst);
        System.out.println("\t"+avt+"\n");
        String[] art = avt.split(",");
        if(art.length!=brt.length){System.out.println("Invalid credentials");jLabel7.setText("Invalid Credentials");}           //alibaba Do this  at all functions
        //String[] prt = pst.split(",");
        int temp;
        int wt[] = new int[10];
        int i, n, j;
        int p[] = new int[10];
        int at[] = new int[10];int gant[]=new int[10];
        int pname[] = new int[10];String pde;
        int downtt[]=new int[30];
        float sumwt = 0;float sumtt=0;
        //  System.out.println("Enter the no of process");
        // scanf("%d",&n);
        n = brt.length;
        for (i = 0; i < n; i++) {
//            System.out.println("Enter the  burst time");
//            scanf("%d",&p[i]);
            p[i] = Integer.parseInt(brt[i]);
            pname[i] = i + 1;
//            System.out.println("Enter the arrival time");
//            scanf("%d",&at[i]);
            at[i] = Integer.parseInt(art[i]);
        }
        int tt[]=new int[10];
        for (i = 0; i < n; i++) {
            for (j = i + 1; j < n; j++) {
                if (at[i] > at[j]) {
                    temp = at[j];
                    at[j] = at[i];
                    at[i] = temp;
                    temp = p[j];
                    p[j] = p[i];
                    p[i] = temp;
                    temp = pname[j];
                    pname[j] = pname[i];
                    pname[i] = temp;
                }
            }
        }
        wt[0] =0;
        tt[0]=wt[0]+p[0];
        sumtt=tt[0];
        downtt[0]=at[0];downtt[1]=tt[0]+at[0];
        pde=pname[0]+","+tt[0]+","+wt[0];pdets.add(pde);
        String result;ArrayList<String> res=new ArrayList<>();
//        System.out.println("\nWaiting time for process %d is %d\n",pname[0],wt[0]);
        result = "\nWaiting time for process " + pname[0] + " is " + wt[0] + "\n";
        res.add(result);
        for (i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + p[i - 1] - at[i] + at[i - 1];
            tt[i]=wt[i]+p[i];
            downtt[i+1]=tt[i]+at[i];
         //   tt[i]=tt[i-1]+at[i-1]+p[i]-at[i];
            pde=pname[i]+","+tt[i]+","+wt[i];pdets.add(pde);
            
//            System.out.println("\nWaiting time for process %d is %d\n",pname[i],wt[i]);
            result = "\nWaiting time for process " + pname[i] + " is " + wt[i] + "\n";
            res.add(result);
            sumwt = sumwt + wt[i];
            sumtt=sumtt+tt[i];
        }
        i=0;
        for(int c=0;c<n;c++)
        {           
            gant[i]=pname[i];i++;
        }
        float average;results[0]=sumwt;
        average = (float)sumwt/ n;results[1]=average;
        results[2]=sumtt;results[3]=(float)sumtt/n;
//        System.out.println("\nAverage waiting time is %d\n",average);
//        System.out.println("Total waiting time is %d",sumwt);
        result = "\nAverage waiting time is " + average;
        res.add(result);
       
//        Intent intent = new Intent(this, Main3Activity.class);
//        intent.putStringArrayListExtra("resultid", res);
//        startActivity(intent);
       new Activity4(pdets,gant,downtt,results).setVisible(true);

    }
    public void sjfnon(java.awt.event.ActionEvent evt)
    {
        String bst = jEditorPane1.getText();
        String avt = jEditorPane2.getText();
        String[] brt = bst.split(",");
        //int btindx=0,atindx=0;
        String[] art = avt.split(",");
        int flag1;
        int down[]=new int[30];
        if(art.length!=brt.length){System.out.println("Invalid credentials");jLabel7.setText("Invalid Credentials");}
        ArrayList<String> res = new ArrayList<>();
        int min, k = 1, btime = 0;float results[]=new float[4];
        int[] bt = new int[10];
        int temp, j;
        int[] p = new int[10];
        int[] at = new int[10];
        int[] wt = new int[10];
        int[] tt = new int[10];
        int ta = 0, sum = 0;
        float wavg, tavg, tsum = 0, wsum = 0;
        String result;
        System.out.println(" -------Shortest Job First Scheduling ( NP )-------\n");
        result = " -------Shortest Job First Scheduling ( NP )-------\n";
        res.add(result);
        //   System.out.println("\nEnter the No. of processes :");
//scanf("%d",&n);
        // n=scan.nextInt();
        int n = brt.length, i;
        ArrayList<String> pdets=new ArrayList<>();
        for (i = 0; i < n; i++) {
            p[i] = i + 1;
            System.out.println("\tEnter the burst time of" + (i + 1) + " process :");
//scanf(" %d",&bt[i]);
            //  bt[i]=scan.nextInt();
            bt[i] = Integer.parseInt(brt[i]);
            System.out.println("\tEnter the arrival time of" + (i + 1) + " process :");
//scanf(" %d",&at[i]);
            // at[i]=scan.nextInt();
            at[i] = Integer.parseInt(art[i]);
        }
        flag1=0;int container;container=at[0];
        for(int l=1;l<n;l++)
        {
            if(container!=at[l])
            {
                flag1=1;
            }
            container=at[l];
        }
        if(flag1==1)
        {
/*Sorting According to Arrival Time*/

        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (at[i] < at[j]) {
                    temp = p[j];
                    p[j] = p[i];
                    p[i] = temp;
                    temp = at[j];
                    at[j] = at[i];
                    at[i] = temp;
                    temp = bt[j];
                    bt[j] = bt[i];
                    bt[i] = temp;
                }
            }
        }
        k=1;
        }
else
            k=0;
/*Arranging the table according to Burst time,
Execution time and Arrival Time
Arrival time <= Execution time
*/

        for (j = 0; j < n; j++) 
        {
            btime = btime + bt[j];
            min = bt[k];
            for (i = k; i < n; i++) {
                if (btime >= at[i] && bt[i] < min) {
                    temp = p[k];
                    p[k] = p[i];
                    p[i] = temp;
                    temp = at[k];
                    at[k] = at[i];
                    at[i] = temp;
                    temp = bt[k];
                    bt[k] = bt[i];
                    bt[i] = temp;
                    min=bt[k];
                }
            }
            k++;
        }
        int z=0;
        wt[0] = at[0];
        if(wt[0]!=at[0])
        {
            wt[0]=0;z=1;
        }
        for (i = 1; i < n; i++) {
            sum = sum + bt[i - 1];
            wt[i] = sum - at[i]+z;
            wsum = wsum + wt[i];
        }

        wavg = (wsum / n);results[0]=wsum;results[1]=(wavg);
        String pde;
        for (i = 0; i < n; i++) {
            ta = ta + bt[i];
            tt[i] = ta - at[i]+z;
            tsum = tsum + tt[i];
        }
        results[2]=tsum;
        System.out.println(results[2]+"Is the totalTurn around time");
        tavg = (tsum / n);results[3]=(float)tavg;
        //        System.out.println("************************");
        //   result="************************";
        //  res.add(result);
        System.out.println("\n RESULT:-");
        result = "\n RESULT:-\n";
        res.add(result);
        System.out.println("\nProcess\t Burst\t Arrival\t Waiting\t Turn-around");
        result = "\nProcess\t\t\t B.T \t\t\t A.T \t\t\t W.T \t\t\t T.T ";
        res.add(result);
        for (i = 0; i < n; i++) {
            System.out.println("\n" + p[i] + "\t\t\t" + bt[i] + "\t\t\t" + at[i] + "\t\t\t" + wt[i] + "\t\t\t" + tt[i]);
            result = "\n" + p[i] + "\t\t\t" + bt[i] + "\t\t\t" + at[i] + "\t\t\t" + wt[i] + "\t\t\t" + tt[i];
            res.add(result);
            pde=p[i]+","+tt[i]+","+wt[i];
            pdets.add(pde);
        }
        result = "Gantt Chart is \n";
        res.add(result);
        int gantt[] = new int[10];
        down[0]=at[0];
        for (i = 0; i < n; i++) {
            gantt[i] = p[i];
            down[i+1]=tt[i]+at[i];
            result = "P" + gantt[i] + "\t\t\t\t";
            res.add(result);
        }
        System.out.println("\n\nAVERAGE WAITING TIME : " + wavg);
        result = "\n\nAVERAGE WAITING TIME : " + wavg;
        res.add(result);
        System.out.println("\nAVERAGE TURN AROUND TIME : " + tavg);
        result = "\nAVERAGE TURN AROUND TIME : " + tavg;
        res.add(result);
        new Activity4(pdets,gantt,down,results).setVisible(true);
    }
   public void srtf(java.awt.event.ActionEvent evt)
   {
       String pde;ArrayList<String> pdest=new ArrayList<>();
       String bst = jEditorPane1.getText();
        String avt = jEditorPane2.getText();
         String[] brt = bst.split(",");
        //int btindx=0,atindx=0;
        float[] results=new float[4];
        String[] art = avt.split(",");
        if(art.length!=brt.length){System.out.println("Invalid credentials");jLabel7.setText("Invalid Credentials");}
        //  Scanner scan=new Scanner(System.in);
        int[] arrival_time = new int[20];
        int[] burst_time = new int[20];
        int[] temp = new int[20];
        int []down=new int[50];
        int i, smallest, count = 0, time, limit;
        ArrayList<String> res = new ArrayList<>();
        String result;
        float wait_time = 0, turnaround_time = 0, end;
        float average_waiting_time, average_turnaround_time;
        int[] gantarr = new int[20];
        int m = 0;
        System.out.println("\nEnter the Total Number of Processes:\t");
        // limit=scan.nextInt();
        limit = brt.length;
        int ttime=0;
        System.out.println("\nEnter Details of" + limit + " Processes\n");
        for (i = 0; i < limit; i++) {
            System.out.println("\nEnter Arrival Time:\t");
            //arrival_time[i]=scan.nextInt();
            arrival_time[i] = Integer.parseInt(art[i]);
            System.out.println("Enter Burst Time:\t");
            //scanf("%d", &burst_time[i]);
            // burst_time[i]=scan.nextInt();
            burst_time[i] = Integer.parseInt(brt[i]);
            temp[i] = burst_time[i];
        }
        burst_time[9] = 9999;
        //gantarr[-1]=-1;
              System.out.println("\n\nProcess\t|Turnaround time|waiting time\n");
        result = "\n\nProcess\t|Turnaround time|waiting time\n";
        res.add(result);down[0]=arrival_time[0];
        
        for (time = 0; count != limit; time++) {
            smallest = 9;
            for (i = 0; i < limit; i++) {
                if (arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0) {
                    //System.out.println("gantarr");
                    smallest = i;
                }
            }
          
            try {
                if (gantarr[m - 1] != smallest + 1) {
                    gantarr[m] = smallest + 1;
                   down[m]=time;
                    m++;
      
                }
                //	System.out.println("Intry");
            } catch (Exception e) {
                gantarr[0] = smallest + 1;
                m++;
            }

            //System.out.print("aSFA");
            burst_time[smallest] = burst_time[smallest] - 1;
            if (burst_time[smallest] == 0) {
                count++;
                end = time + 1;
                wait_time = wait_time + end - arrival_time[smallest] - temp[smallest];
                turnaround_time = turnaround_time + end - arrival_time[smallest];
                System.out.println("P" + (smallest + 1) + "\t|\t" + ((time + 1) - arrival_time[smallest]) + "\t|\t" + ((time + 1) - arrival_time[smallest] - temp[smallest]));
                result="\nP" + (smallest + 1) + "\t|\t" + ((time + 1) - arrival_time[smallest]) + "\t|\t" + ((time + 1) - arrival_time[smallest] - temp[smallest]);
                res.add(result);
                pde=(smallest + 1) + "," + ((time + 1) - arrival_time[smallest]) + "," + ((time + 1) - arrival_time[smallest] - temp[smallest]);
                pdest.add(pde);
            }
            ttime=time;
        }
        result = "\n\nGantt chart is ";
        res.add(result);
        for (int l = 0; l < m; l++)
        //      System.out.print("P" + gantarr[l] + "\t");
        {
            result = "P" + gantarr[l] + "\t\t\t\t";
            res.add(result);
        }
        down[m]=(ttime + 1);
        System.out.println("Value of outermost is "+down[m+1]);
        results[0]=(float)wait_time;results[2]=(float)turnaround_time;
        average_waiting_time = (float) wait_time / limit;results[1]=(float)average_waiting_time;
        average_turnaround_time = (float) turnaround_time / limit;results[3]=(float)average_turnaround_time;
        System.out.println("\n\nAverage Waiting Time:\t" + average_waiting_time + "\n");
        result = "\n\nAverage Waiting Time:\t" + average_waiting_time + "\n";
        res.add(result);
        System.out.println("Average Turnaround Time:\t" + average_turnaround_time + "\n");
        result = "Average Turnaround Time:\t" + average_turnaround_time + "\n";
        res.add(result);
        //System.out.println("\n\nGantt chart is ");
        new Activity4(pdest,gantarr,down,results).setVisible(true);
      //  this.setVisible(false);   
   }            
   public void rrobin(java.awt.event.ActionEvent evt)
   {    
       String pde;ArrayList<String> pdest=new ArrayList<>();
       String bst = jEditorPane1.getText();
        String avt = jEditorPane2.getText();
          //pt.setEnabled(false);
    int m=0;float results[]=new float[4];
        String qst = jEditorPane4.getText();
        String[] brt = bst.split(",");
        //int btindx=0,atindx=0;
        String[] art = avt.split(",");
        int down[]=new int[60];
    if(art.length!=brt.length){System.out.println("Invalid credentials");jLabel7.setText("Invalid Credentials");}
        int count, j, n, time, remain, flag = 0, time_quantum;
        int wait_time = 0, turnaround_time = 0;
        int at[] = new int[10];
        int bt[] = new int[10];
        int rt[] = new int[10];int gant[]=new int[60];
        //System.out.println("Enter Total Process:\t ");
        //scanf("%d",&n);
        n = brt.length;
        remain = n;
        
        ArrayList<String> res = new ArrayList<>();
        for (count = 0; count < n; count++) {
            //System.out.println("Enter Arrival Time and Burst Time for Process Process Number %d :",count+1);
            //scanf("%d",&at[count]);
            at[count] = Integer.parseInt(art[count]);
            //scanf("%d",&bt[count]);
            bt[count] = Integer.parseInt(brt[count]);
            rt[count] = bt[count];
        }
        // System.out.println("Enter Time Quantum:\t");
        //scanf("%d",&time_quantum);
        time_quantum = Integer.parseInt(qst);
        //System.out.println("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
        res.add("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
        for (time = 0, count = 0; remain != 0; ) {
            if (rt[count] <= time_quantum && rt[count] > 0) {
                time += rt[count];
                rt[count] = 0;
                flag = 1;
                gant[m]=count+1;
                down[m+1]=time;
                System.out.println("Added here"+down[m]);
                m++;
            } else if (rt[count] > 0) {
                rt[count] -= time_quantum;
                time += time_quantum;
                down[m+1]=time;         
                 System.out.println("Added here"+down[m]);
             gant[m]=count+1;m++;}

            if (rt[count] == 0 && flag == 1) {
                remain--;
                //      System.out.println("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
                // res=res+"P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count];
                // res.append("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
                String rslt = "P[" + (count + 1) + "]\t|\t" + (time - at[count]) + "\t|\t" + (time - at[count] - bt[count]) + "\n";
                res.add(rslt);
               pde=(count + 1) + "," + (time - at[count]) + "," + (time - at[count] - bt[count]);
               pdest.add(pde);
               wait_time += time - at[count] - bt[count];
                turnaround_time += time - at[count];
                flag = 0;            
            }
            if (count == n - 1)
                count = 0;
            else if (at[count + 1] <= time)
                count++;
            else
                count = 0;
        }
        down[0]=at[0];
        //System.out.println("\nAverage Waiting Time= %f\n",wait_time*1.0/n);
        String ro = "\nAverage Waiting Time= " + (float) wait_time * 1.0 / n + "\n";
        res.add(ro);
        //System.out.println("Avg Turnaround Time = %f",turnaround_time*1.0/n);
        ro = "Avg Turnaround Time = " + (turnaround_time * 1.0 / n);
        res.add(ro);
        results[0]=(float)wait_time;results[1]=(float) ((float)wait_time * 1.0 / n);results[2]=(float)turnaround_time;results[3]=(float)(turnaround_time * 1.0 / n);
    new Activity4(pdest,gant,down,results).setVisible(true);
   }
   public void priornon(java.awt.event.ActionEvent evt)
   {
       
       String pde;ArrayList<String> pdest=new ArrayList<>();
        String bst = jEditorPane1.getText();
        String avt = jEditorPane2.getText();
        String pst = jEditorPane3.getText();
        //pt.setEnabled(false);
     float results[]=new float[4];
        String[] brt = bst.split(",");float ttsumu=0;
        //int btindx=0,atindx=0;
        String[] art = avt.split(",");
        String[] prt = pst.split(",");
if(art.length!=brt.length&&art.length!=prt.length&&brt.length!=prt.length){System.out.println("Invalid credentials");jLabel7.setText("Invalid Credentials");}
        int small=999, pos, i, n;
        pos = -1;
        int[] b = new int[10];
        int[] p = new int[10];
        int[] pr = new int[10];
        int[] at = new int[10];
int []down=new int[10];
        int temp;
        ArrayList<String> res = new ArrayList<>();
        String result;
        n = brt.length;
        for (i = 0; i < n; i++)

        {
            pr[i] = i + 1;
        }

        System.out.println("Enter the burst time:");
        for (i = 0; i < n; i++)

        {
            System.out.println(brt[i]);
            b[i] = Integer.parseInt(brt[i]);
        }

   //     System.out.println("Enter the priorities:");
        for (int j = 0; j < n; j++)
        {
            p[j] = Integer.parseInt(prt[j]);
        }

        System.out.println("Enter the arrival time:");
        for (i = 0; i < n; i++)

        {
            //scanf("%d",&at[i]);
            // at[i] = scan.nextInt();
            at[i] = Integer.parseInt(art[i]);
        }

               int flag1=0;int container;container=at[0];
        for(int l=1;l<n;l++)
        {
            if(container!=at[l])
            {
                flag1=1;
            }
            container=at[l];
        }
        int z;
if(flag1==1)
{
        for (int k = 0; k < n; k++) {
            if (at[k] < small) {
                small = at[k];
                pos = k;
            }
        }

        temp = b[0];                           //Interchanging burst times,positions,processes
        b[0] = b[pos];
        b[pos] = temp;
        temp = p[0];
        p[0] = p[pos];
        p[pos] = temp;
        temp = pr[0];
        pr[0] = pr[pos];
        pr[pos] = temp;
        temp = at[0];
        at[0] = at[pos];
        at[pos] = temp;
z=1;
}
else z=0;
        int j, tem;
        for (i = z; i < n; i++) {
            for (j = i + 1; j < n; j++) {
                if (p[i] > p[j]) {
                    tem = b[i];
                    b[i] = b[j];
                    b[j] = tem;
                    tem = p[i];
                    p[i] = p[j];
                    p[j] = tem;
                    tem = pr[i];
                    pr[i] = pr[j];
                    pr[j] = tem;
                    tem = at[i];
                    at[i] = at[j];
                    at[j] = tem;
                }
            }
        }

        int wtsumu = 0;
        res.add("\n");
        int[] wt = new int[20];
        int[] tt = new int[20];
        wt[0] = at[0];
        tt[0] = b[0] + wt[0];
        ttsumu=ttsumu+tt[0];
//        System.out.println("\nwaiting time for process" + pr[0] + "is " + wt[0]);
//        result = "\nwaiting time for process" + pr[0] + "is " + wt[0];
//        res.add(result);
//        System.out.println("\nTurnAround time for process" + pr[0] + "is" + tt[0]);
//        result = "\nTurnAround time for process" + pr[0] + "is" + tt[0];
//        res.add(result);
        for (i = 1; i < n; i++)

        {
            wt[i] = wt[i - 1] - at[i] + at[i - 1] + b[i - 1];
            tt[i] = wt[i] + at[i] + b[i] - at[i];
//            System.out.println("\nwaiting time for process" + pr[i] + "is" + wt[i]);
//            result = "\nwaiting time for process" + pr[i] + "is" + wt[i];
//            res.add(result);
//            System.out.println("\nTurnAround time for process" + pr[i] + "is" + tt[i]);
//            result = "\nTurnAround time for process" + pr[i] + "is" + tt[i];
//            res.add(result);
               wtsumu =wtsumu + wt[i];
               ttsumu=ttsumu+tt[i];
        }
        // System.out.println("\n" + wtsumu + " is the total and" + (float) wtsumu / n + "is the average waiting time");

        result = "\n\nProcess\t|\tPriority\t|\tTurnaround time\t|\twaiting time\n";
        res.add(result);
        int gant[]=new int[10];
        down[0]=at[0];
        for (i = 0; i < n; i++)
        {
            result="\n\t\t\t\tP"+pr[i]+"\t\t\t"+p[i]+"\t\t\t"+tt[i]+"\t\t\t"+wt[i];
            pde=pr[i]+","+tt[i]+","+wt[i];pdest.add(pde);
            down[i+1]=tt[i]+at[i];
            res.add(result);
        }
        result = "\n" + wtsumu + " is the total and" + (float) wtsumu / n + "is the average waiting time";
        res.add(result);
        results[0]=(float)wtsumu;results[1]=(float)wtsumu / n;results[2]=(float)ttsumu;results[3]=(float)ttsumu/n;
        result="\nGantt Chart is \n";
        res.add(result);
        System.out.println("TT total time is "+results[2]);
        for (i = 0; i < n; i++)
        {
            // System.out.println("Process" + pr[i] + "\n");
            result = "P" + pr[i] + "\t\t\t\t";
            gant[i]=pr[i];
            res.add(result);
        }
      new Activity4(pdest,gant,down,results).setVisible(true);
   }
   public void priorpre(java.awt.event.ActionEvent evt)
   {
          int gant[]=new int[10];int m=0;
       String pde;ArrayList<String> pdest=new ArrayList<>();
       String bst = jEditorPane1.getText();
        String avt = jEditorPane2.getText();
        String pst = jEditorPane3.getText();
        String[] brt = bst.split(",");
        String[] art = avt.split(",");
        String[] prt = pst.split(",");float results[]=new float[4];
        int down[]=new int[50];
        if(art.length!=brt.length&&art.length!=prt.length&&brt.length!=prt.length){System.out.println("Invalid credentials");jLabel7.setText("Invalid Credentials");}
         int i,j,n,time,sum_wait=0,sum_turnaround=0,smallest;
         int at[]=new int[10];int bt[]=new int[10];
  int pt[]=new int[10];int rt[]=new int[10];
  int remain;
n=brt.length;
remain=n;
String result;
int ttime=0;
ArrayList<String> res=new ArrayList<>();
  for(i=0;i<n;i++)
  {
//    printf("Enter arrival time, burst time and priority for process p%d :",i+1);
//    scanf("%d",&at[i]);
//    scanf("%d",&bt[i]);
      at[i]=Integer.parseInt(art[i]);
      bt[i]=Integer.parseInt(brt[i]);
//    scanf("%d",&pt[i]);
      pt[i]=Integer.parseInt(prt[i]);
    rt[i]=bt[i];
  }
  pt[9]=999;
       System.out.println("\n\nProcess\t|Turnaround time|waiting time\n");
  result="\n\nProcess\t|Turnaround time|waiting time\n";
  res.add(result);
  down[0]=at[0];
       for(time=0;remain!=0;time++)
  {
    smallest=9;
    for(i=0;i<n;i++)
    {
      if(at[i]<=time && pt[i]<pt[smallest] && rt[i]>0)
      {
    smallest=i;
      }
    }
    
     try {
                if (gant[m - 1] != smallest + 1) {
                    gant[m] = smallest + 1;
                   down[m]=time;
                    m++;
                }
                //	System.out.println("Intry");
            } catch (Exception e) {
                gant[0] = smallest + 1;
                m++;
            }
    rt[smallest]--;
    if(rt[smallest]==0)
    {
      remain--;
      System.out.println("P["+smallest+1+"]\t|\t"+(time+1-at[smallest])+"\t|\t"+(time+1-at[smallest]-bt[smallest])+"\n");
      result="P["+smallest+1+"]\t|\t"+(time+1-at[smallest])+"\t|\t"+(time+1-at[smallest]-bt[smallest])+"\n";
      res.add(result);
      pde=(smallest+1)+","+(time+1-at[smallest])+","+(time+1-at[smallest]-bt[smallest]);
      pdest.add(pde);
      sum_wait+=time+1-at[smallest];
      sum_turnaround+=time+1-at[smallest]-bt[smallest];
    }
    ttime=time;
  }
       down[m]=ttime+1;
       System.out.println("\nAvg waiting time = "+(float)sum_wait*1.0+"\n");results[0]=(float)sum_wait;results[1]=(float) ((float)sum_wait*1.0/n);
       result="\nAvg waiting time = "+(float)sum_wait*1.0+"\n";res.add(result);
       System.out.println("Avg turnaround time = "+(float)sum_turnaround*1.0/n+"\n");
       result="Avg turnaround time = "+(float)sum_turnaround*1.0/n+"\n";res.add(result);results[2]=(float)sum_turnaround;results[3]=(float)sum_turnaround/n;
       new Activity4(pdest,gant,down,results).setVisible(true);
   }
 
}